{"version":3,"sources":["GitHubAPI.js","App.js","serviceWorker.js","index.js"],"names":["searchByUsername","username","fetch","concat","then","res","json","catch","err","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","search","arguments","length","undefined","state","clearContent","setState","searching","GitHubAPI","result","total_count","username_list","items","e","console","log","userdata","list","_this2","_this$state","map","item","index","react_default","a","createElement","Image","key","src","avatar_url","className","Container","Row","Col","lg","lib","time","handler","Form","Control","placeholder","aria-label","onChange","event","target","value","Spinner","animation","role","variant","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"mQAEaA,EAAmB,SAACC,GAAD,OAAcC,MAAK,GAAAC,OAFvC,yBAEuC,oBAAAA,OAA0BF,IAC1EG,KAAK,SAAAC,GAAG,OAAIA,EAAIC,SAChBC,MAAM,SAAAC,GACL,MAAMA,qEC+FKC,cAtFb,SAAAA,EAAaC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IAClBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAQRQ,OAAS,SAACjB,GAAuBkB,UAAAC,OAAA,QAAAC,IAAAF,UAAA,IAAAA,UAAA,GAC3BlB,IAAaU,EAAKW,MAAMrB,UAC1BU,EAAKY,eAGHtB,GACFU,EAAKa,SAAS,CAACvB,SAAUA,EAAUwB,WAAW,IAC9CC,EACkBzB,GACjBG,KAAK,SAACuB,GACDA,EAAOC,YACTjB,EAAKa,SAAS,CAAEK,cAAeF,EAAOG,MAAOL,WAAW,IAExDd,EAAKY,iBAGRhB,MAAM,SAACwB,GACNC,QAAQC,IAAIF,MAGdpB,EAAKY,gBA7BWZ,EAiCpBY,aAAe,WACbZ,EAAKa,SAAS,CACZvB,SAAU,KACViC,SAAU,KACVT,WAAW,KAnCbd,EAAKW,MAAQ,CACXrB,SAAU,KACV4B,cAAe,GACfJ,WAAW,GALKd,wEAyCV,IAEJwB,EAFIC,EAAAtB,KAAAuB,EACuCvB,KAAKQ,MAA5CrB,EADAoC,EACApC,SAAU4B,EADVQ,EACUR,cAAeJ,EADzBY,EACyBZ,UASjC,OANEU,EADEN,EAAcT,OACTS,EAAcS,IAAI,SAACC,EAAMC,GAAP,OACvBC,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAOC,IAAML,EAAQM,IAAMP,EAAKQ,WAAaC,UAAU,aAGjDP,EAAAC,EAAAC,cAAA,uBAGRF,EAAAC,EAAAC,cAACM,EAAA,EAAD,CAAWD,UAAU,QACnBP,EAAAC,EAAAC,cAAA,MAAIK,UAAU,eAAd,sBACAP,EAAAC,EAAAC,cAACO,EAAA,EAAD,CAAKF,UAAU,kCACbP,EAAAC,EAAAC,cAACQ,EAAA,EAAD,CAAKC,GAAG,KACNX,EAAAC,EAAAC,cAACU,EAAA,SAAD,CAAUC,KAAK,MAAMC,QAAQ,YAC3Bd,EAAAC,EAAAC,cAACa,EAAA,EAAKC,QAAN,CACET,UAAU,eACVU,YAAY,kBACZC,aAAW,sCACXC,SAAU,SAACC,GAAD,OAAWzB,EAAKlB,OAAO2C,EAAMC,OAAOC,aAMpDtC,GACAgB,EAAAC,EAAAC,cAACO,EAAA,EAAD,CAAKF,UAAU,oBACbP,EAAAC,EAAAC,cAACQ,EAAA,EAAD,KACEV,EAAAC,EAAAC,cAACqB,EAAA,EAAD,CAASC,UAAU,SAASC,KAAK,SAASC,QAAQ,SAChD1B,EAAAC,EAAAC,cAAA,QAAMK,UAAU,WAAhB,iBAKRP,EAAAC,EAAAC,cAACO,EAAA,EAAD,KACET,EAAAC,EAAAC,cAACQ,EAAA,EAAD,CAAKH,UAAU,eACX/C,IAAawB,GAAaU,YA/EtBiC,IAAMC,WCDJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOnC,EAAAC,EAAAC,cAACkC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM9E,KAAK,SAAA+E,GACjCA,EAAaC","file":"static/js/main.7809b403.chunk.js","sourcesContent":["const api = 'https://api.github.com'\r\n\r\nexport const searchByUsername = (username) => fetch(`${api}/search/users?q=${username}`)\r\n  .then(res => res.json())\r\n  .catch(err => {\r\n    throw err\r\n  })","import React from 'react'\nimport * as GitHubAPI from './GitHubAPI'\nimport './App.css'\nimport {\n  Container,\n  Row,\n  Col,\n  Form,\n  Spinner,\n  Image\n} from 'react-bootstrap'\nimport { Debounce } from 'react-throttle'\n\nclass App extends React.Component {\n  constructor (props) {\n    super(props)\n    this.state = {\n      username: null,\n      username_list: [],\n      searching: false\n    }\n  }\n\n  search = (username, page = 1) => {\n    if (username !== this.state.username) {\n      this.clearContent()\n    }\n\n    if (username) {\n      this.setState({username: username, searching: true});\n      GitHubAPI\n      .searchByUsername(username)\n      .then((result) => {\n        if (result.total_count) {\n          this.setState({ username_list: result.items, searching: false })\n        } else {\n          this.clearContent();\n        }\n      })\n      .catch((e) => {\n        console.log(e)\n      });\n    } else {\n      this.clearContent();\n    }\n  }\n\n  clearContent = () => {\n    this.setState({\n      username: null,\n      userdata: null,\n      searching: false\n    });\n  }\n\n  render () {\n    const { username, username_list, searching } = this.state\n    let list;\n    if (username_list.length) {\n      list = username_list.map((item, index) =>\n        <Image key={ index } src={ item.avatar_url } className='avatar' />\n      )\n    } else {\n       list = <p>No results</p>\n    }\n    return (\n      <Container className='py-5'>\n        <h1 className='text-center'>GitHub User Search</h1>\n        <Row className='justify-content-md-center pb-5'>\n          <Col lg='6'>\n            <Debounce time='400' handler='onChange'>\n              <Form.Control\n                className='input-github'\n                placeholder='Search username'\n                aria-label='Type a username to search on GitHub'\n                onChange={(event) => this.search(event.target.value)}\n              />\n            </Debounce>\n          </Col>\n        </Row>\n        {\n          searching &&\n          <Row className='text-center py-5'>\n            <Col>\n              <Spinner animation='border' role='status' variant='light'>\n                <span className='sr-only'>Loading...</span>\n              </Spinner>\n            </Col>\n          </Row>\n        }\n        <Row>\n          <Col className='text-center'>\n            { username && !searching && list }\n          </Col>\n        </Row>\n      </Container>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}